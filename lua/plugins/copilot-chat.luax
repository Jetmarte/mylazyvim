return {
  "CopilotC-Nvim/CopilotChat.nvim",
  branch = "main",
  dependencies = {
    { "zbirenbaum/copilot.lua" }, -- motor de GitHub Copilot
    { "nvim-lua/plenary.nvim" },
    { "MunifTanjim/nui.nvim" },
  },
  build = "make tiktoken", -- requerido en Linux/macOS
  cmd = "CopilotChat",
  opts = function()
    local user = vim.env.USER or "User"
    user = user:sub(1, 1):upper() .. user:sub(2)
    return {
      model = "gpt-3.5-turbo", -- üîë nuevo campo obligatorio
      auto_insert_mode = true,
      question_header = "ÔÄá  " .. user .. " ",
      answer_header = "Ôí∏  Copilot ",
      window = {
        width = 0.4,
      },
    }
  end,
  keys = {
    { "<c-s>", "<CR>", ft = "copilot-chat", desc = "Submit Prompt", remap = true },
    { "<leader>a", "", desc = "+ai", mode = { "n", "v" } },
    {
      "<leader>aa",
      function()
        return require("CopilotChat").toggle()
      end,
      desc = "Toggle (CopilotChat)",
      mode = { "n", "v" },
    },
    {
      "<leader>ax",
      function()
        return require("CopilotChat").reset()
      end,
      desc = "Clear (CopilotChat)",
      mode = { "n", "v" },
    },
    {
      "<leader>aq",
      function()
        vim.ui.input({
          prompt = "Quick Chat: ",
        }, function(input)
          if input ~= "" then
            require("CopilotChat").ask(input)
          end
        end)
      end,
      desc = "Quick Chat (CopilotChat)",
      mode = { "n", "v" },
    },
    {
      "<leader>ap",
      function()
        require("CopilotChat").select_prompt()
      end,
      desc = "Prompt Actions (CopilotChat)",
      mode = { "n", "v" },
    },
  },
  config = function(_, opts)
    local chat = require("CopilotChat")

    vim.api.nvim_create_autocmd("BufEnter", {
      pattern = "copilot-chat",
      callback = function()
        vim.opt_local.relativenumber = false
        vim.opt_local.number = false
      end,
    })

    -- üìå Prompts personalizados
    local custom_prompts = {
      {
        title = "Commit",
        prompt = "Escribe un mensaje de commit siguiendo la convenci√≥n de commitizen. Mant√©n el t√≠tulo con menos de 50 caracteres.",
      },
      {
        title = "Docs",
        prompt = "Por favor, agrega comentarios de documentaci√≥n al c√≥digo seleccionado.",
      },
      {
        title = "Explicar",
        prompt = "Escribe una explicaci√≥n del c√≥digo seleccionado en forma de p√°rrafos de texto.",
      },
      {
        title = "Corregir",
        prompt = "Hay un problema en este c√≥digo. Identifica los errores y reescribe el c√≥digo con las correcciones. Explica tu razonamiento.",
      },
      {
        title = "Optimizar",
        prompt = "Optimiza el c√≥digo seleccionado para mejorar su rendimiento y legibilidad. Explica tus optimizaciones.",
      },
      {
        title = "Revisar",
        prompt = "Revisa el c√≥digo seleccionado.",
      },
      {
        title = "Pruebas",
        prompt = "Por favor, genera pruebas para mi c√≥digo.",
      },
      {
        title = "Explicaci√≥n",
        prompt = "Explica el c√≥digo de manera did√°ctica y precisa.",
      },
    }

    opts.prompts = vim.list_extend(opts.prompts or {}, custom_prompts)
    chat.setup(opts)
  end,
}
